<% # expects "prompt" %>
<li class="<% if is_author_of?(prompt) %>own <% end %>prompt blurb" role="article">
  <div class="header module">
    <h4 class="heading" title="title">
      <%= prompt.title || ts("Untitled") %>
      <%= ts("by %{person}", :person => prompt.anonymous? ? "Anonymous" : (prompt.pseud ? prompt.pseud.byline : prompt.challenge_signup.pseud.byline)) %>
      <% unless @collection %>
        <%= ts("in %{title}", :title => prompt.collection.title) %>
      <% end %>
    </h4>

    <% tag_groups = prompt.tag_groups %>

    <% # eventually we should let mod specify topmost tag type to display -- ie chars and rels for single-fandom meme, freeforms for single-relationship meme  %>
	  <h5 class="heading" title="fandom">
      <%= tag_groups['Fandom'].collect{|tag| link_to_tag(tag) }.join(', ').html_safe if tag_groups['Fandom'] %>
		  &nbsp;
	  </h5>

    <!--required tags-->
	  <%= get_symbols_for(prompt, tag_groups) %>
	  <p class="datetime"><%= set_format_for_date(prompt.created_at) %></p>
  </div>
    
  <h6 class="landmark heading">Tags</h6>  
  <ul class="tags commas">
    <%= blurb_tag_block(prompt, tag_groups) %>
    <% any_types = TagSet::TAG_TYPES.select {|type| prompt.send("any_#{type}")} %>
    <% unless any_types.empty? %>
      <%= any_types.map {|type| content_tag(:li, ts("Any #{type.capitalize}"), :class => "tag") }.join("\n").html_safe %>
    <% end %>
  </ul>
  <% if prompt.optional_tag_set && !prompt.optional_tag_set.tags.empty? %>
    <h6 class="heading">Optional:</h6>
    <ul class="tags commas">
      <%= tag_link_list(prompt.optional_tag_set.tags, link_to_works=true) %>
    </ul>
  <% end %>
    
  <% unless prompt.description.blank? %>
    <h6 class="landmark heading">Summary</h6>
    <blockquote class="userstuff summary" title="prompt">
      <%=raw sanitize_field(prompt, :description) %>
    </blockquote>
  <% end %>

<!--review-->
  <% unless prompt.url.blank? %>
    <p>
      <% url_label = prompt.collection.challenge.send("request_url_label") %><%= url_label.blank? ? ts("URL") : url_label %>:
      <%= link_to(prompt.url, prompt.url) %>
    </p>
  <% end %>   

  <%= render "prompts/prompt_controls", :challenge_signup => prompt.challenge_signup, :prompt => prompt %>
  
  <% unless (suppress_claims ||= false) %>  
    <% # if prompt has been claimed list by whom %>
    <% unless prompt.request_claims.unfulfilled.empty? %>
      <div class="claims listbox">
        <h5 class="heading"><%= ts("Claimed By")%></h5>
        <ul class="commas index">
          <% if prompt.collection.anonymous? %>
            <%= ts("%{count} anonymous claimants", :count => prompt.request_claims.unfulfilled.count) %>
          <% else %>
            <%= User.for_claims(prompt.request_claims.unfulfilled.value_of(:id)).value_of(:login).map {|user| content_tag(:li, user)}.join("\n").html_safe %>
          <% end %>
        </ul>
      </div>
    <% end %>
  
    <% # if prompt has been fulfilled list works %>
    <% unless prompt.unfulfilled? %>
      <div class="works listbox">
        <h5 class="heading"><%= ts("Fulfilled By")%></h5>
        <ul class="index">
          <% prompt.request_claims.fulfilled.map(&:creation).each do |creation| %>
            <% if creation.is_a?(Work) %>
              <%= render "works/work_blurb", :work => creation %>
            <% end %>
          <% end %>
        </ul>
      </div>
    <% end %>
  <% end %>
</li>
